package com.storefront.ui;

import com.storefront.cart.ShoppingCart;
import com.storefront.managers.InventoryManager;
import com.storefront.models.Armor;
import com.storefront.models.Health;
import com.storefront.models.Weapon;
import com.storefront.models.SalableProduct;

import java.util.Scanner;

public class StoreFront {
    private InventoryManager inventoryManager;
    private ShoppingCart shoppingCart;
    private Scanner scanner;

    public StoreFront() {
        inventoryManager = new InventoryManager();
        setShoppingCart(new ShoppingCart());
        
        scanner = new Scanner(System.in);
        
        initializeStore();
        
    
    }

    private void initializeStore() {
        inventoryManager.addProduct(new Weapon("Sword", "A sharp steel sword", 99.99, 10, 50));
        inventoryManager.addProduct(new Armor("Shield", "A sturdy wooden shield", 79.99, 5, 30));
        inventoryManager.addProduct(new Health("Health Potion", "Restores 50 HP", 19.99, 20, 50));

        System.out.println("Welcome to the Store Front!");
    }

    public void displayMenu() {
        System.out.println("\n --- \n");
        System.out.println("1. View Inventory");
        System.out.println("2. Add Product to Cart");
        System.out.println("3. Remove Product from Cart");
        System.out.println("4. View Cart");
        System.out.println("5. Checkout");
        System.out.println("6. Exit");
        System.out.println("\n --- \n");
        System.out.print("Enter your choice: ");
    }
    

    public static void main(String[] args) {
        StoreFront storeFront = new StoreFront();
        storeFront.displayMenu();
        storeFront.handleUserInput();  // This keeps the program running
    }

	public ShoppingCart getShoppingCart() {
		return shoppingCart;
	}

	public void setShoppingCart(ShoppingCart shoppingCart) {
		this.shoppingCart = shoppingCart;
	}
	
	//jojo code
	//** Handles user input for store interaction **/
	
	public void handleUserInput() {
	    int choice;
	    
	    do {
//	        displayMenu();
	        while (!scanner.hasNextInt()) {
	            System.out.println("\n --- \n");
	            System.out.println("Invalid input. Please enter a number.");
	            scanner.next(); // Clear invalid input

                displayMenu();
	        }
	        choice = scanner.nextInt();
	        scanner.nextLine(); // Consume leftover newline character

	        switch (choice) {
	            case 1:
	                viewInventory();
	                System.out.println("\n --- \n");
	            case 2:
	                addToCart();
	                System.out.println("\n --- \n");
	            case 3:
	                removeFromCart();
	                System.out.println("\n --- \n");
	            case 4:
//	                shoppingCart.viewCart();
	                break;
	            case 5:
//	                shoppingCart.checkout();
	                break;
	            case 6:
	                System.out.println("Exiting the store. Goodbye!");
	                break;
	            default:
	                System.out.println("\n --- \n");
	                System.out.println("Invalid choice. Try again.");
	                displayMenu();
	        }
	    } while (choice != 6);
	    scanner.close();
	}
	
    private void viewInventory() {
        System.out.println("\nAvailable Products:");
        for (SalableProduct product : inventoryManager.getProducts()) {
            System.out.println(product);
        }
    }
    
    /**
     * Adds a product to the shopping cart.
     */
    private void addToCart() {
        System.out.print("Enter the product name to add: ");
        String productName = scanner.nextLine().trim();
        SalableProduct product = inventoryManager.getProductByName(productName);

        if (product != null && product.getQuantity() > 0) {
            shoppingCart.addItem(product);
            product.setQuantity(product.getQuantity() - 1);
            System.out.println(productName + " added to cart.");
        } else {
            System.out.println("Product not available or out of stock.");
        }
    }

    /**
     * Removes a product from the shopping cart.
     */
    private void removeFromCart() {
        System.out.print("Enter the product name to remove: ");
        String productName = scanner.nextLine().trim();
        shoppingCart.removeItem(productName);
        System.out.println(productName + " removed from cart.");
    }

}